{
  "layout_dets": [
    {
      "category_type": "header",
      "poly": [
        444.99999999999994,
        112.5,
        1225,
        112.5,
        1225,
        147.5,
        444.99999999999994,
        147.5
      ],
      "ignore": false,
      "order": 1,
      "anno_id": 1,
      "text": "Published as a conference paper at ICLR 2024",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            444.99999999999994,
            112.5,
            1225,
            112.5,
            1225,
            147.5,
            444.99999999999994,
            147.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        437.5,
        340,
        2102.5,
        340,
        2102.5,
        477.5,
        437.5,
        477.5
      ],
      "ignore": false,
      "order": 2,
      "anno_id": 1,
      "text": "**LLMs**. The experiments conducted on the MATH dataset employed prominent large language models (LLMs), namely, GPT-3.5-Turbo, hereafter abbreviated as GPT3.5, and GPT-4, denoted as GPT4 for brevity. We directly utilized the release APIs of OPENAI.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            437.5,
            340,
            2102.5,
            340,
            2102.5,
            477.5,
            437.5,
            477.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        560.0000000000001,
        599.9999999999999,
        2110,
        599.9999999999999,
        2110,
        2227.68,
        560.0000000000001,
        2227.68
      ],
      "ignore": false,
      "order": "4",
      "anno_id": 1,
      "text": "- GPT4 ComplexCoT. This is the GPT4 model employing greedy decoding (i.e. temperature  $= 0$ ) with the ComplexCoT Fu et al. (2022) prompting method. The reasoning examples utilized in the prompt for reasoning are derived from the corresponding Complex CoT publication Fu et al. (2022). As greedy decoding is used, we do not follow the selfconsistency method Wang et al. (2022) to sample reasoning paths. - GPT3.5. With the standard prompt, the GPT3.5 model is used to generate the answer. - GPT3.5 ComplexCoT. Similar to the GPT4 ComplexCoT but change the model to GPT3.5. - GPT4 PHP+ComplexCoT. This is the GPT4 model employing greedy decoding (i.e. temperature = 0) with the PHP Zheng et al.  $(2023)$ +Complex CoTFu et al.  $(2022)$ . Specifically, in the PHP Zheng et al. (2023) framework, the Complex CoT prompt is used to generate initial base answers, from which the PHP+Complex CoT can then develop the subsequent answer generation prompts. Thus, at the beginning of the interaction, by passing a concatenation of the base prompt of Complex CoT and the current question to the LLM, the base answer can be generated. Then, relying on the Complex CoT prompts revised into the PHP version with additional hint sentences, the progressive-hint prompting framework is performed on this base answer to update the hint over interactions to generate the right answer. We refer to this as the PHP+Complex CoT corresponding to the Progressive-Hint Prompting Complex CoT (PHP-Complex CoT) in the original work Zheng et al. (2023). The number of shots from Complex CoT is 8. - GPT4 BoT wo/ experience. The GPT4 model is used to perform reasoning with the proposed BoT framework without the experience accumulation. The basic settings of BoT follow those presented in the main paper. Therefore, after one iteration, the aggregated chain will be used as the solution. - GPT4 BoT. The GPT4 is used to perform reasoning with the full version of BoT as shown in the main paper. - GPT4 BoT + CoT. Apart from the BoT framework, 5 reasoning examples from the CoT Wei et al. (2022) publication are included in the prompt. Therefore, in each iteration, the prompt contains not only experience but also additional 5 CoT reasoning examples. - GPT3.5 BoT. Similar to the GPT4 BoT but change the model to GPT3.5. - GPT3.5 BoT (GPT4). In this experiment, we utilize the GPT3.5 to perform reasoning, thus generating thought chains in the Thought Structure Generation. However, when performing the thought evaluation and the experience generation in the aggregated Thought Chain Analysis, the GPT4 model is used to get the evaluation and the analysis feedback.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            560.0000000000001,
            599.9999999999999,
            2110,
            599.9999999999999,
            2110,
            2227.68,
            560.0000000000001,
            2227.68
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        450,
        2265.18,
        1720,
        2265.18,
        1720,
        2312.68,
        450,
        2312.68
      ],
      "ignore": false,
      "order": "5",
      "anno_id": 1,
      "text": "We obtain the following additional observations from the results in Figure 5.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            450,
            2265.18,
            1720,
            2265.18,
            1720,
            2312.68,
            450,
            2312.68
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        447.5,
        2345,
        2100,
        2345,
        2100,
        2750,
        447.5,
        2750
      ],
      "ignore": false,
      "order": "6",
      "anno_id": 1,
      "text": "The top performance of BoT on challenging problems derives from the accumulation of *experience*. BoT-related methods, such as GPT4 BoT and GPT4 BoT + CoT, consistently achieve the highest problem-solving rate on different sub-categories of MATH. Specifically, GPT4 BoT outperforms the current best GPT4 PHP+ComplexCoT by  $8.6\\%$ , while GPT4 BOT + CoT is even  $12.4\\%$  higher. In all seven categories, GPT4 BoT is at least  $0.8\\%$  higher than GPT4 PHP+ComplexCoT, and the corresponding number on the Algebra problems is even  $12.5\\%$ . Similar for GPT3.5 BoT and GPT3.5 BoT + CoT. However, when no experience is accumulated in the BoT framework, the performance drops significantly on all mathematical problems, as shown by the GPT4 BoT wo/ experience.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            447.5,
            2345,
            2100,
            2345,
            2100,
            2750,
            447.5,
            2750
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        437.5,
        2775,
        2105,
        2775,
        2105,
        3052.5,
        437.5,
        3052.5
      ],
      "ignore": false,
      "order": "7",
      "anno_id": 1,
      "text": "In addition to experience with error analysis, including correct examples, such as simple CoT instances, is essential for improving the problem-solving efficiency of the BoT in challenging **mathematical problems.** GPT4 BoT outperforms the GPT4 PHP+ComplexCoT by a large margin on the first five sub-categories of MATH problems. Nevertheless, in the domains of Precalculus and Intermediate Algebra, which demand more intricate reasoning and complex logical steps for solutions, BoT exhibits only a marginal improvement of  $0.8\\%$  and  $2.4\\%$ , respectively. These gains ",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            437.5,
            2775,
            2105,
            2775,
            2105,
            3052.5,
            437.5,
            3052.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "footer",
      "poly": [
        1255,
        3127.5,
        1302.5,
        3127.5,
        1302.5,
        3170,
        1255,
        3170
      ],
      "ignore": false,
      "order": "8",
      "anno_id": 1,
      "text": "18",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            1255,
            3127.5,
            1302.5,
            3127.5,
            1302.5,
            3170,
            1255,
            3170
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "section",
      "poly": [
        440,
        502.5,
        675,
        502.5,
        675,
        552.5,
        440,
        552.5
      ],
      "ignore": false,
      "order": "3",
      "anno_id": 1,
      "text": " # Competitors.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            440,
            502.5,
            675,
            502.5,
            675,
            552.5,
            440,
            552.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    }
  ],
  "extra": {
    "relation": []
  },
  "page_info": {
    "page_attribute": {},
    "page_no": 9,
    "height": 3300,
    "width": 2550,
    "image_path": "100_18_png.jpg"
  }
}