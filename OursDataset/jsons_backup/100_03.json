{
  "layout_dets": [
    {
      "category_type": "header",
      "poly": [
        452.49999999999994,
        110,
        1230,
        110,
        1230,
        147.5,
        452.49999999999994,
        147.5
      ],
      "ignore": false,
      "order": 1,
      "anno_id": 1,
      "text": "Published as a conference paper at ICLR 2024",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            452.49999999999994,
            110,
            1230,
            110,
            1230,
            147.5,
            452.49999999999994,
            147.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        450,
        347.5,
        2102.5,
        347.5,
        2102.5,
        755,
        450,
        755
      ],
      "ignore": false,
      "order": 2,
      "anno_id": 1,
      "text": "ToT performs well on problems that even challenge GPT-4 OpenAI (2023). Considering its high ability, the base thought structure of BoT largely utilizes this tree thought structure ToT. And, thanks to the boosting framework, the tree structure generated in each iteration of BoT is binary and shallow instead of the ToT's complex tree, in which each node corresponds to massive child nodes. However, the base structure is not restricted to ToT. In contrast, BoT is flexible as the base thought structure can be either ToT, GoT Besta et al. (2023), or CR Zhang et al. (2023b), where Graph of Thoughts (GoT) Besta et al. (2023) is the most recent work that expands the thought structure into a graph format. This paper will only focus on the ToT as the base thought structure and leave the usage of GoT for future work.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            450,
            347.5,
            2102.5,
            347.5,
            2102.5,
            755,
            450,
            755
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        445,
        790,
        2102.5,
        790,
        2102.5,
        1322.5,
        445,
        1322.5
      ],
      "ignore": false,
      "order": 3,
      "anno_id": 1,
      "text": "**Automatic Prompting.** Releasing humans from task-specific prompts attracts much attention Shin et al. (2020). To guarantee the reasoning ability of LLMs, conventional CoT Wei et al. (2022) relies on human priors to manually generate task-specific demonstrations as the prompt. However, the zero-shot CoT Kojima et al. (2022) shows that even without hand-crafted examples, by simply adding \"Let's think step by step\" to the prompt, LLMs are able to perform step-by-step reasoning toward accurate answers. These insights have spurred a series of subsequent studies. Auto-CoT Zhang et al. (2022) eliminates manual efforts by retrieving usable reasoning chains generated by zero-shot CoT. Active-Prompt Diao et al. (2023) first measures the uncertainty of a set of questions and thus selects only the uncertain ones to be annotated by humans. ToT Yao et al. (2024) can also reduce manual efforts, but for each task, it still requires experts to provide possible next-step thoughts in the prompt. Our paper introduces a novel boosting approach for manual-free prompting. Starting with a simple prompt, BoT iteratively enhances it based on the analysis of LLMs on thoughts.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            445,
            790,
            2102.5,
            790,
            2102.5,
            1322.5,
            445,
            1322.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        445,
        1352.5,
        2102.5,
        1352.5,
        2102.5,
        2160,
        445,
        2160
      ],
      "ignore": false,
      "order": 4,
      "anno_id": 1,
      "text": "**Prompt Engineering via Feedback.** Utilizing responses from LLMs to the input prompt as feedback for further prompt revisions has garnered much attention. Those who continuously revise the given prompt based on evaluation descriptions from LLMs aim to gain an accurate answer Weng et al. (2023). Using a similar higher-level idea of our paper, SELF-REFINE Madaan et al. (2023) proposes an iterative self-refinement algorithm to let the LLM produce feedback for its output for further refinement. PHP Zheng et al. (2023) simplifies this process by directly adding a solution from the previous answer as a hint to the subsequent prompt. REFINER Paul et al. (2023) is also related to our paper as it evaluates each reasoning step as feedback to produce a more reasonable one. Another line of research explores ensembles, particularly leveraging the boosting mechanism Freund et al. (1996) to refine the prompt using feedback from a set of examples. They adjust the prompt to focus on the unsolved problems in the previous iteration by either adding a few shot examples uncertain in the previous Pitis et al. (2023) or relying on a feedback-reflect-refine process Zhang et al. (2023a). APO Pryzant et al. (2023) iteratively refines a prompt, using the performance of the prior prompt to form a natural language for optimization. These works prove the effectiveness of the boosting mechanism in prompt engineering. However, our work is the first to highlight the importance of error analysis in enhancing the prompt toward generating effective reasoning chains. The proposed BoT extends this insight to implement an automated prompting framework by iteratively accumulating an ensemble of trial-and-error reasoning experiences in the prompt.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            445,
            1352.5,
            2102.5,
            1352.5,
            2102.5,
            2160,
            445,
            2160
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        450,
        2532.5,
        2102.5,
        2532.5,
        2102.5,
        2757.5,
        450,
        2757.5
      ],
      "ignore": false,
      "order": "7",
      "anno_id": 1,
      "text": "The objective of prompt engineering is to design a prompt  $\\mathbb{I}$  containing multiple language sequences, such that with this prompt as input, a pre-trained large language model (LLM) denoted as  $p_{\\theta}$  parameterized by  $\\theta$ , can obtain the desired language sequence y. Thus, the standard Input-Output (IO) can be formulated as  $y \\sim p_{\\theta}(y | \\mathbb{I}(X, Q))$  in which  $\\mathbb{I}(\\cdot)$  means that the prompt wraps task instructions  $X$  and the corresponding question  $Q$ .",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            450,
            2532.5,
            2102.5,
            2532.5,
            2102.5,
            2757.5,
            450,
            2757.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "plain_text",
      "poly": [
        437.5,
        2795,
        2107.5,
        2795,
        2107.5,
        3057.5,
        437.5,
        3057.5
      ],
      "ignore": false,
      "order": "8",
      "anno_id": 1,
      "text": "The prompt can be designed in a more delicate way to guide the LLM toward solving a problem in a step-by-step manner. Each intermediate reasoning step is denoted as  $z_i$  (a.k.a *thought*). CoT Wei et al. (2022) provides few-shot examples with the answer of each example containing a chain of *thought*  $z_{1...n}$ . This leads to  $y \\sim p_{\\theta}\\left(y|\\mathbb{I}\\left(\\left[z_{1...n}\\right]^{N}, X, Q\\right)\\right)$  where  $N$  is the number of examples included in the prompt.",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            437.5,
            2795,
            2107.5,
            2795,
            2107.5,
            3057.5,
            437.5,
            3057.5
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "footer",
      "poly": [
        1237.5,
        3120,
        1290,
        3120,
        1290,
        3175,
        1237.5,
        3175
      ],
      "ignore": false,
      "order": "9",
      "anno_id": 1,
      "text": "3",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            1237.5,
            3120,
            1290,
            3120,
            1290,
            3175,
            1237.5,
            3175
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "section",
      "poly": [
        452.5,
        2432.5,
        810,
        2432.5,
        810,
        2470,
        452.5,
        2470
      ],
      "ignore": false,
      "order": "6",
      "anno_id": 1,
      "text": " ## 3.1 BACKGROUND",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            452.5,
            2432.5,
            810,
            2432.5,
            810,
            2470,
            452.5,
            2470
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    },
    {
      "category_type": "section",
      "poly": [
        450,
        2297.5,
        1085,
        2297.5,
        1085,
        2345,
        450,
        2345
      ],
      "ignore": false,
      "order": "5",
      "anno_id": 1,
      "text": "# 3 BOOSTING OF THOUGHTS",
      "line_with_spans": [
        {
          "category_type": "text_span",
          "poly": [
            450,
            2297.5,
            1085,
            2297.5,
            1085,
            2345,
            450,
            2345
          ],
          "text": ""
        }
      ],
      "attribute": {
        "text_language": "",
        "text_background": "",
        "text_rotate": ""
      }
    }
  ],
  "extra": {
    "relation": []
  },
  "page_info": {
    "page_attribute": {},
    "page_no": 22,
    "height": 3300,
    "width": 2550,
    "image_path": "100_3_png.jpg"
  }
}